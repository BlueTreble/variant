\set ECHO none



ok 1..0
1..67
ok 1 - cast to text
ok 2 - Check equality
ok 3 - Check NULL
ok 4 - variant.variant() works
ok 5 - variant.text_in()
ok 6 - variant.text_out()
ok 7 - valid variant(DEFAULT)
ok 8 - Register variant
ok 9 - registration test variant correctly added
ok 10 - check variant.registered for newly added variant
ok 11 - Check format_type() output
ok 12 - _variant.registered( text )
ok 13 - _variant.registered( int )
ok 14 - threw 22023: Invalid variant type bullshit registered test variant that should never actually exist
ok 15 - threw 22023: Invalid variant type <>
ok 16 - threw 22023: Invalid typmod -2
ok 17 - threw 22023: Invalid typmod <>
ok 18 - Verify current allowed types
ok 19 - NULLs not allowed in allowed_types
ok 20 - test variant.add_type
ok 21 - test variant.add_types
ok 22 - Verify newly added types
ok 23 - threw new row for relation "_registered" violates check constraint "allowed_types_may_not_contain_nulls"
ok 24 - Register allowed types variant
ok 25 - Create table for testing allowed types
ok 26 - threw 22023: type integer is not allowed in variant.variant(test allowed types)
ok 27 - Allow use of int
ok 28 - threw 22023: type smallint is not allowed in variant.variant(test allowed types)
ok 29 - threw 2BP01: variant "test allowed types" is still in use
ok 30 - Drop temp table
ok 31 - remove type
ok 32 - test valid variant names
ok 33 - threw 42601
ok 34 - test variant name (
ok 35 - test variant name )
ok 36 - test variant name "
ok 37 - test variant name 99999
ok 38 - (int,)::int = NULL
ok 39 - (int,1)::int != NULL
ok 40 - (int,)::int = NULL is NULL
ok 41 - (int,1)::int != NULL is NULL
ok 42 - Verify we are testing all storage options
ok 43 - Not allowed to disable variant storage
ok 44 - Not allowed to disable variant storage
ok 45 - Register test storage variant
ok 46 - test storage disallows storage
ok 47 - Verify event trigger
ok 48 - Drop _end trigger
ok 49 - Create storage test table with event triggers disabled
ok 50 - Drop _start trigger
Verify we get WARNINGs because EVENT TRIGGERs are MIA
WARNING:  No ddl_command_start event trigger to verify variant storage; re-creating
CONTEXT:  SQL statement "SELECT bool_or( _variant._ensure_storage_check_one( p_warning, a ) ) FROM unnest( array[ 'start', 'end' ] ) a"
PL/pgSQL function _variant._ensure_storage_check(boolean) line 4 at IF
SQL statement "SELECT _variant._ensure_storage_check()"
PL/pgSQL function variant.storage_allowed(character varying,boolean) line 5 at PERFORM
SQL statement "SELECT variant.storage_allowed( 'DEFAULT', false )"
PL/pgSQL function lives_ok(text,text) line 6 at EXECUTE statement
WARNING:  No ddl_command_end event trigger to verify variant storage; re-creating
CONTEXT:  SQL statement "SELECT bool_or( _variant._ensure_storage_check_one( p_warning, a ) ) FROM unnest( array[ 'start', 'end' ] ) a"
PL/pgSQL function _variant._ensure_storage_check(boolean) line 4 at IF
SQL statement "SELECT _variant._ensure_storage_check()"
PL/pgSQL function variant.storage_allowed(character varying,boolean) line 5 at PERFORM
SQL statement "SELECT variant.storage_allowed( 'DEFAULT', false )"
PL/pgSQL function lives_ok(text,text) line 6 at EXECUTE statement
WARNING:  Found table columns with variants that were disabled or disallowed storage
DETAIL:  The following variants were enabled and had storage allowed:
	storage_test.v variant.variant("test storage")
CONTEXT:  SQL statement "SELECT _variant._verify_storage(true)"
PL/pgSQL function _variant._ensure_storage_check(boolean) line 7 at PERFORM
SQL statement "SELECT _variant._ensure_storage_check()"
PL/pgSQL function variant.storage_allowed(character varying,boolean) line 5 at PERFORM
SQL statement "SELECT variant.storage_allowed( 'DEFAULT', false )"
PL/pgSQL function lives_ok(text,text) line 6 at EXECUTE statement
ok 51 - Disallow storage on DEFAULT variant
ok 52 - test storage allows storage after fixup
ok 53 - No records found in variant.stored__bad
ok 54 - Can not ALTER TABLE
ok 55 - Not allowed to disable variant storage while in use
ok 56 - Ensure we can store in "test storage"
ok 57 - Can ALTER TABLE to use "test variant"
ok 58 - Can CREATE VIEW
ok 59 - Can disallow storage
ok 60 - test storage disallows storage
ok 61 - Create test template
ok 62 - Create cmp_out type
ok 63 - Register "test no store" with no types to ensure we ignore them when there are none
ok 64 - Create test_cmp for "test variant"
ok 65 - Create test_cmp for "test no store"
ok 66 - Test results from "test variant"
ok 67 - Test results from "test no store"
